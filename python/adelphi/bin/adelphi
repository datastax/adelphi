#!python

import argparse
import logging

import click

from adelphi import system_keyspaces
from adelphi.cql import export_cql_schema
from adelphi.gemini import export_gemini_schema, to_string
from adelphi.store import get_schema, build_keyspaces_metadata

logging.basicConfig(level=logging.INFO)
log = logging.getLogger('adelphi')

@click.group()
@click.option('--hosts', default='127.0.0.1', help='Comma-separated list of contact points. Default: 127.0.0.1')
@click.option('--port', type=int, default=9042, help='Database RCP port. Default: 9042')
# not implemented yet
#@click.option('--output', metavar='/file/path', help='Output file. If not specified, it will write to stdout')
@click.option('--username', help='Database username')
@click.option('--password', help='Database password')
@click.option('--keyspaces', help='Comma-separated list of keyspaces to include. If not specified, all keypaces will '
                         'be included, except system keypaces')
@click.option('--rf', type=int, default=3, help='Replication factor to override original setting. Optional.')
@click.option('--anonymize/--no-anonymize', default=True)
@click.pass_context
def export(ctx, hosts, port, username, password, keyspaces, rf, anonymize):

    ctx.ensure_object(dict)

    schema = get_schema(hosts.split(','), port, username, password)
    keyspaces_metadata = build_keyspaces_metadata(keyspaces, schema)

    if len(keyspaces_metadata) == 0:
        log.info("No keyspace selected.")
        exit(1)

    log.info("Exporting schema for the following keyspaces: %s", ','.join([k.name for k in keyspaces_metadata]))

    ctx.obj['keyspaces_metadata'] = keyspaces_metadata
    ctx.obj['schema'] = schema
    ctx.obj['options'] = {'rf':rf, 'anonymize':anonymize}


@export.command()
@click.pass_context
def export_cql(ctx):
    print(export_cql_schema(ctx.obj['keyspaces_metadata'],ctx.obj['schema'],ctx.obj['options']))


@export.command()
@click.pass_context
def export_gemini(ctx):
    keyspaces_metadata = ctx.obj['keyspaces_metadata']
    # multiple keyspaces is not supported with gemini
    if len(keyspaces_metadata) > 1:
        log.error("Gemini schema doesn't support multiple keyspaces.")
        exit(1)
    print(to_string(export_gemini_schema(keyspaces_metadata,ctx.obj['schema'],ctx.obj['options'])))


if __name__ == '__main__':
    export(obj={})
