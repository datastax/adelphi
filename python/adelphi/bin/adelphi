#!python

import argparse
import logging

import click
from cassandra.cluster import Cluster, ExecutionProfile, EXEC_PROFILE_DEFAULT, default_lbp_factory
from cassandra.auth import PlainTextAuthProvider

from adelphi import system_keyspaces
from adelphi.cql import export_cql_schema
from adelphi.gemini import export_gemini_schema

logging.basicConfig(level=logging.INFO)
log = logging.getLogger('anonymizer')

def build_auth_provider(username = None,password = None):
    # instantiate auth provider if credentials have been provided
    auth_provider = None
    if username is not None and password is not None:
        auth_provider = PlainTextAuthProvider(username=username, password=password)
    return auth_provider


def get_schema(hosts, port, username = None,password = None):
    ep = ExecutionProfile(load_balancing_policy=default_lbp_factory())
    cluster = Cluster(hosts, port=port, auth_provider=build_auth_provider(username,password), execution_profiles={EXEC_PROFILE_DEFAULT: ep})
    log.info("Connecting to the cluster to get metadata...")
    session = cluster.connect()
    schema = cluster.metadata
    cluster.shutdown()
    return schema


def build_keyspaces_metadata(keyspaces, schema):
    selected_keyspaces = keyspaces.split(',') if keyspaces is not None else None
    if selected_keyspaces is not None:
        [schema.keyspaces[k] for k in selected_keyspaces]
    else:
        # filter out system keyspaces
        return [k for k in schema.keyspaces.values() if k.name not in system_keyspaces]


@click.group()
@click.option('--hosts', default='127.0.0.1', help='Comma-separated list of contact points. Default: 127.0.0.1')
@click.option('--port', type=int, default=9042, help='Database RCP port. Default: 9042')
# not implemented yet
#@click.option('--output', metavar='/file/path', help='Output file. If not specified, it will write to stdout')
@click.option('--username', help='Database username')
@click.option('--password', help='Database password')
@click.option('--keyspaces', help='Comma-separated list of keyspaces to include. If not specified, all keypaces will '
                         'be included, except system keypaces')
@click.option('--rf', type=int, default=3, help='Replication factor to override original setting. Optional.')
@click.option('--anonymize/--no-anonymize', default=True)
@click.pass_context
def export(ctx, hosts, port, username, password, keyspaces, rf, anonymize):

    ctx.ensure_object(dict)

    schema = get_schema(hosts.split(','), port, username, password)
    keyspaces_metadata = build_keyspaces_metadata(keyspaces, schema)

    if len(keyspaces_metadata) == 0:
        log.info("No keyspace selected.")
        exit(1)

    log.info("Exporting schema for the following keyspaces: %s", ','.join([k.name for k in keyspaces_metadata]))

    ctx.obj['keyspaces_metadata'] = keyspaces_metadata
    ctx.obj['schema'] = schema
    ctx.obj['options'] = {'rf':rf, 'anonymize':anonymize}


@export.command()
@click.pass_context
def export_cql(ctx):
    export_cql_schema(ctx.obj['keyspaces_metadata'],ctx.obj['schema'],ctx.obj['options'])


@export.command()
@click.pass_context
def export_gemini(ctx):
    keyspaces_metadata = ctx.obj['keyspaces_metadata']
    # multiple keyspaces is not supported with gemini
    if len(keyspaces_metadata) > 1:
        log.error("Gemini schema doesn't support multiple keyspaces.")
        exit(1)
    export_gemini_schema(keyspaces_metadata,ctx.obj['schema'],ctx.obj['options'])


if __name__ == '__main__':
    export(obj={})
