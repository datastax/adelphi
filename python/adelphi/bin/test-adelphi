#!python

# Run test suite for some set of Cassandra versions.
#
# We implement this as a front-end script because the tox/pytest/unittest chain
# isn't great about iterating over a suite of test fixtures and re-running the
# collected tests for each of them.  Rather than fight with the frameworks we
# manage the fixture iteration manually in this script.  This also has the
# nice side effect of moving a lot of C* checking/session code out of the test
# suite, which in turn should allow us to write simpler tests.
import configparser
import os
import re

from adelphi.store import with_local_cluster

import click
import docker
from tenacity import retry, stop_after_attempt, wait_fixed
import tox


# Default C* versions to include in all integration tests
DEFAULT_CASSANDRA_VERSIONS = ["2.1.22", "2.2.19", "3.0.23", "3.11.10", "4.0-rc1"]

TOX_DEPENDENCIES = """pytest
    subprocess32 ~= 3.5
    tenacity ~= 7.0"""
TOX_CONFIG = "tox.ini"


@retry(stop=stop_after_attempt(3), wait=wait_fixed(2))
def runCassandraContainer(client, version):
    return client.containers.run(name="adelphi", remove=True, detach=True, ports={9042: 9042}, image="cassandra:{}".format(version))


def writeToxIni(version):
    config = configparser.ConfigParser()
    config["tox"] = { "envlist": "py2, py3" }
    config["testenv"] = {"deps": TOX_DEPENDENCIES, \
        "commands": "pytest {posargs}", \
        "setenv": "CASSANDRA_VERSION = {}".format(version)}
    with open(TOX_CONFIG, 'w') as configfile:
        config.write(configfile)


def buildVersionMap():
    assert sorted(DEFAULT_CASSANDRA_VERSIONS)
    rv = {v:v for v in DEFAULT_CASSANDRA_VERSIONS}
    majorMinorPattern = re.compile(r"(\d\.\d).*")
    for v in DEFAULT_CASSANDRA_VERSIONS:
        majorMinorMatch = majorMinorPattern.match(v)
        if majorMinorMatch:
            majorMinor = majorMinorMatch.group(1)
            rv[majorMinor] = v
            # The reason we needed to asset that our input was sorted; we want the last
            # major version entry we discover in the list to map to the major version.
            # So "2" => "2.2.whatever" rather than "2.1.whatever"
            rv[majorMinor.split('.')[0]] = v
    return rv


def resolveCassandraVersions(cassandra_versions):
    if not cassandra_versions:
        return DEFAULT_CASSANDRA_VERSIONS
    versionMap = buildVersionMap()
    computedVersions = [x for x in [versionMap.get(v) for v in cassandra_versions] if x is not None]
    if not computedVersions:
        print("Could not compute valid Cassandra versions based on args, using defaults")
        return DEFAULT_CASSANDRA_VERSIONS
    return computedVersions


@click.command()
@click.option('--cassandra', '-c', multiple=True, type=str)
@click.option('--python', '-p', multiple=True, type=click.Choice(["py2","py3"], case_sensitive = False))
@click.option("--pytest", "-t", type=str, help="Arguments to be passed to pytest")
def runtests(cassandra, python, pytest):
    client = docker.from_env()
    tox_args = ["-e {}".format(py) for py in python] if python else []
    if pytest:
        tox_args.append("--")
        tox_args.append(pytest)
    print("Full tox args: {}".format(tox_args))

    cassandra_versions = resolveCassandraVersions(cassandra)
    print("Cassandra versions to test: {}".format(','.join(cassandra_versions)))
    for version in resolveCassandraVersions(cassandra_versions):

        print("Running test suite for Cassandra version {}".format(version))
        container = runCassandraContainer(client, version)

        print("Validating connection to local Cassandra")
        def validationFn(cluster):
            session = cluster.connect()
            rs = session.execute("select * from system.local")
            print("Connected to Cassandra cluster, first row of system.local: {}".format(rs.one()))
            return (cluster, session)
        with_local_cluster.retry_with(stop=stop_after_attempt(5), wait=wait_fixed(3))(validationFn)

        try:
            if os.path.exists(TOX_CONFIG):
                os.remove(TOX_CONFIG)
            writeToxIni(version)

            # cmdline() will raise SystemExit when it's done so trap that here to avoid
            # exiting all the things
            try:
                status = tox.cmdline(tox_args)
                print("tox status: {}".format(status))
            except SystemExit:
                pass
        except Exception as exc:
            print("Exception running tests for Cassandra version {}".format(version), exc)
        finally:
            container.stop()


if __name__ == '__main__':
    runtests(obj={})
