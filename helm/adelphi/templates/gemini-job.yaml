apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: gemini-job
  namespace: {{ .Values.namespace }}
  annotations:
    "helm.sh/hook": pre-install
spec:
  templates:
  - name: gemini-oracle-sut
    container:
      image: golang
      workingDir: /workspace
      command:
        - sh
        - -c
      args:
        - mkdir /results/gemini;
          /workspace/gemini
          --oracle-cluster={{ .Values.source.clusterName }}-{{ .Values.source.dc }}-service
          --oracle-username={{ .Values.source.clusterName }}-superuser
          --oracle-password="`cat /source-secret/password`"
          --test-cluster={{ .Values.target.clusterName }}-{{ .Values.target.dc }}-service
          --test-username={{ .Values.target.clusterName }}-superuser
          --test-password="`cat /target-secret/password`"
          --duration={{ .Values.gemini_test_duration }}
          --schema=/workspace/gemini_schema.json
          --outfile=/results/gemini/results.txt
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      volumeMounts:
      - name: workspace
        mountPath: /workspace
      - name: source-secret-volume
        mountPath: /source-secret
        readOnly: true
      - name: target-secret-volume
        mountPath: /target-secret
        readOnly: true
      - name: results-pv
        mountPath: /results
    initContainers:
    - name: download-gemini
      image: alpine
      command: ["sh", "-c"]
      workingDir: /workspace
      args:
        - wget -O - {{ .Values.gemini_download_url }} | tar -zxvf -
      volumeMounts:
      - name: workspace
        mountPath: /workspace
    - name: extract-schema
      image: python:3.10.0a1-alpine3.12
      command: ["sh", "-c", "-e"]
      args:
        - echo "Extract Gemini schema using anonymizer script";
          pip install cassandra-driver;
          wget -q https://raw.githubusercontent.com/datastax/adelphi/master/schema-anonymizer/anonymizer.py;
          python anonymizer.py --hosts="{{ .Values.source.clusterName }}-{{ .Values.source.dc }}-service" --username="{{ .Values.source.clusterName }}-superuser" --password="`cat /source-secret/password`" --keyspaces="{{ .Values.gemini_schema_keyspace }}" --format=gemini --no-anonymize > /workspace/gemini_schema.json;
          echo "Done";
      volumeMounts:
      - name: workspace
        mountPath: /workspace
      - name: source-secret-volume
        mountPath: /source-secret
        readOnly: true
    volumes:
    - name: workspace
      emptyDir: {}
    - name: source-secret-volume
      secret:
        secretName: {{ .Values.source.clusterName }}-superuser
        items:
        - key: password
          path: password
    - name: target-secret-volume
      secret:
        secretName: {{ .Values.target.clusterName }}-superuser
        items:
        - key: password
          path: password
    - name: results-pv
      persistentVolumeClaim:
        claimName: results-pvc