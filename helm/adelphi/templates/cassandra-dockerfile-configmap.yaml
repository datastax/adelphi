apiVersion: v1
kind: ConfigMap
metadata:
  name: cassandra-dockerfile-configmap
  namespace: {{ .Values.namespace }}
data:
  Dockerfile: |
    FROM adoptopenjdk:11-jre-hotspot-focal

    # explicitly set user/group IDs
    RUN set -eux; \
      groupadd -r cassandra --gid=999; \
      useradd -r -g cassandra --uid=999 cassandra

    RUN set -eux; \
      apt-get update; \
      apt-get install -y --no-install-recommends \
    # solves warning: "jemalloc shared library could not be preloaded to speed up memory allocations"
        libjemalloc2 \
    # "free" is used by cassandra-env.sh
        procps \
    # "cqlsh" needs a python interpreter
        python3 \
    # "ip" is not required by Cassandra itself, but is commonly used in scripting Cassandra's configuration (since it is so fixated on explicit IP addresses)
        iproute2 \
    # Cassandra will automatically use numactl if available
    #   https://github.com/apache/cassandra/blob/18bcda2d4c2eba7370a0b21f33eed37cb730bbb3/bin/cassandra#L90-L100
    #   https://github.com/apache/cassandra/commit/604c0e87dc67fa65f6904ef9a98a029c9f2f865a
        numactl \
      ; \
      rm -rf /var/lib/apt/lists/*; \
    # https://issues.apache.org/jira/browse/CASSANDRA-15767 ("bin/cassandra" only looks for "libjemalloc.so" or "libjemalloc.so.1" which doesn't match our "libjemalloc.so.2")
      libjemalloc="$(readlink -e /usr/lib/*/libjemalloc.so.2)"; \
      ln -sT "$libjemalloc" /usr/local/lib/libjemalloc.so; \
      ldconfig

    # grab gosu for easy step-down from root
    # https://github.com/tianon/gosu/releases
    ENV GOSU_VERSION 1.12
    RUN set -eux; \
      savedAptMark="$(apt-mark showmanual)"; \
      apt-get update; \
      apt-get install -y --no-install-recommends ca-certificates dirmngr gnupg wget; \
      rm -rf /var/lib/apt/lists/*; \
      dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; \
      wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
      wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \
      export GNUPGHOME="$(mktemp -d)"; \
      gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \
      gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
      gpgconf --kill all; \
      rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; \
      apt-mark auto '.*' > /dev/null; \
      [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; \
      apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
      chmod +x /usr/local/bin/gosu; \
      gosu --version; \
      gosu nobody true

    ENV CASSANDRA_HOME /opt/cassandra
    ENV CASSANDRA_CONF /etc/cassandra
    ENV PATH $CASSANDRA_HOME/bin:$PATH

    COPY cassandra/ "$CASSANDRA_HOME"

    RUN set -eux; \
      savedAptMark="$(apt-mark showmanual)"; \
      apt-get update; \
      apt-get install -y --no-install-recommends ca-certificates dirmngr gnupg wget; \
      rm -rf /var/lib/apt/lists/*; \
      \
      apt-mark auto '.*' > /dev/null; \
      [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; \
      apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
      \
      mkdir -p "$CASSANDRA_HOME"; \
      \
      [ ! -e "$CASSANDRA_CONF" ]; \
      mv "$CASSANDRA_HOME/conf" "$CASSANDRA_CONF"; \
      ln -sT "$CASSANDRA_CONF" "$CASSANDRA_HOME/conf"; \
      \
      dpkgArch="$(dpkg --print-architecture)"; \
      case "$dpkgArch" in \
        ppc64el) \
    # https://issues.apache.org/jira/browse/CASSANDRA-13345
    # "The stack size specified is too small, Specify at least 328k"
          if grep -q -- '^-Xss' "$CASSANDRA_CONF/jvm.options"; then \
    # 3.11+ (jvm.options)
            grep -- '^-Xss256k$' "$CASSANDRA_CONF/jvm.options"; \
            sed -ri 's/^-Xss256k$/-Xss512k/' "$CASSANDRA_CONF/jvm.options"; \
            grep -- '^-Xss512k$' "$CASSANDRA_CONF/jvm.options"; \
          elif grep -q -- '-Xss256k' "$CASSANDRA_CONF/cassandra-env.sh"; then \
    # 3.0 (cassandra-env.sh)
            sed -ri 's/-Xss256k/-Xss512k/g' "$CASSANDRA_CONF/cassandra-env.sh"; \
            grep -- '-Xss512k' "$CASSANDRA_CONF/cassandra-env.sh"; \
          fi; \
          ;; \
      esac; \
      \
      mkdir -p "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; \
      chown -R cassandra:cassandra "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; \
      chmod 777 "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; \
      chmod -R a+rwX "$CASSANDRA_CONF"; \
      ln -sT /var/lib/cassandra "$CASSANDRA_HOME/data"; \
      ln -sT /var/log/cassandra "$CASSANDRA_HOME/logs"; \
      \
    # smoke test
      cassandra -v

    VOLUME /var/lib/cassandra

    COPY docker-entrypoint.sh /usr/local/bin/
    ENTRYPOINT ["docker-entrypoint.sh"]

    # 7000: intra-node communication
    # 7001: TLS intra-node communication
    # 7199: JMX
    # 9042: CQL
    # 9160: thrift service
    EXPOSE 7000 7001 7199 9042 9160
    CMD ["cassandra", "-f"]
  docker-entrypoint.sh: |
    #!/bin/bash
    set -e

    # first arg is `-f` or `--some-option`
    # or there are no args
    if [ "$#" -eq 0 ] || [ "${1#-}" != "$1" ]; then
      set -- cassandra -f "$@"
    fi

    # allow the container to be started with `--user`
    if [ "$1" = 'cassandra' -a "$(id -u)" = '0' ]; then
      find "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra \
        \! -user cassandra -exec chown cassandra '{}' +
      exec gosu cassandra "$BASH_SOURCE" "$@"
    fi

    _ip_address() {
      # scrape the first non-localhost IP address of the container
      # in Swarm Mode, we often get two IPs -- the container IP, and the (shared) VIP, and the container IP should always be first
      ip address | awk '
        $1 != "inet" { next } # only lines with ip addresses
        $NF == "lo" { next } # skip loopback devices
        $2 ~ /^127[.]/ { next } # skip loopback addresses
        $2 ~ /^169[.]254[.]/ { next } # skip link-local addresses
        {
          gsub(/\/.+$/, "", $2)
          print $2
          exit
        }
      '
    }

    # "sed -i", but without "mv" (which doesn't work on a bind-mounted file, for example)
    _sed-in-place() {
      local filename="$1"; shift
      local tempFile
      tempFile="$(mktemp)"
      sed "$@" "$filename" > "$tempFile"
      cat "$tempFile" > "$filename"
      rm "$tempFile"
    }

    if [ "$1" = 'cassandra' ]; then
      : ${CASSANDRA_RPC_ADDRESS='0.0.0.0'}

      : ${CASSANDRA_LISTEN_ADDRESS='auto'}
      if [ "$CASSANDRA_LISTEN_ADDRESS" = 'auto' ]; then
        CASSANDRA_LISTEN_ADDRESS="$(_ip_address)"
      fi

      : ${CASSANDRA_BROADCAST_ADDRESS="$CASSANDRA_LISTEN_ADDRESS"}

      if [ "$CASSANDRA_BROADCAST_ADDRESS" = 'auto' ]; then
        CASSANDRA_BROADCAST_ADDRESS="$(_ip_address)"
      fi
      : ${CASSANDRA_BROADCAST_RPC_ADDRESS:=$CASSANDRA_BROADCAST_ADDRESS}

      if [ -n "${CASSANDRA_NAME:+1}" ]; then
        : ${CASSANDRA_SEEDS:="cassandra"}
      fi
      : ${CASSANDRA_SEEDS:="$CASSANDRA_BROADCAST_ADDRESS"}

      _sed-in-place "$CASSANDRA_CONF/cassandra.yaml" \
        -r 's/(- seeds:).*/\1 "'"$CASSANDRA_SEEDS"'"/'

      for yaml in \
        broadcast_address \
        broadcast_rpc_address \
        cluster_name \
        endpoint_snitch \
        listen_address \
        num_tokens \
        rpc_address \
        start_rpc \
      ; do
        var="CASSANDRA_${yaml^^}"
        val="${!var}"
        if [ "$val" ]; then
          _sed-in-place "$CASSANDRA_CONF/cassandra.yaml" \
            -r 's/^(# )?('"$yaml"':).*/\2 '"$val"'/'
        fi
      done

      for rackdc in dc rack; do
        var="CASSANDRA_${rackdc^^}"
        val="${!var}"
        if [ "$val" ]; then
          _sed-in-place "$CASSANDRA_CONF/cassandra-rackdc.properties" \
            -r 's/^('"$rackdc"'=).*/\1 '"$val"'/'
        fi
      done
    fi

    exec "$@"