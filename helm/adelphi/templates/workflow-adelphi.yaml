apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: workflow-adelphi-{{ .Release.Revision }}
spec:
  entrypoint: execute
  serviceAccountName: cass-operator
  volumeClaimTemplates:
  - metadata:
      name: results-pv
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
  templates:
  - name: execute
    dag:
      tasks:
      - name: start-registry
        templateRef:                  
          name: registry
          template: registry-template
      - name: build-cassandra
        depends: "start-registry"
        when: "{{ not (empty .Values.target.git_identifier) }}"
        arguments:
          parameters:
          - name: registry_ip
            value: "{{`{{tasks.start-registry.ip}}`}}"
          - name: git_identifier
            value: "{{ .Values.target.git_identifier }}"
        templateRef:
          name: cassandra-image
          template: cassandra-image-template
      - name: build-cassandra-mgmt-api
        depends: "build-cassandra"
        when: "{{ not (empty .Values.target.git_identifier) }}"
        arguments:
          parameters:
          - name: registry_ip
            value: "{{`{{tasks.start-registry.ip}}`}}"
        templateRef:
          name: cassandra-mgmt-image
          template: cassandra-mgmt-image-template
      - name: cassandra-source
        templateRef:
          name: cassandra-clusters
          template: start-source-cluster
      - name: cassandra-target
        depends: "build-cassandra-mgmt-api"
        arguments:
          parameters:
          - name: registry_ip
            value: "{{`{{tasks.start-registry.ip}}`}}"
        templateRef:
          name: cassandra-clusters
          template: start-target-cluster
      - name: cassandra-ready
        depends: "cassandra-source && cassandra-target"
        templateRef:                  
          name: cassandra-status
          template: ready
      - name: configure-schema
        depends: "cassandra-ready"
        templateRef:
          name: schema-job
          template: configure-schema
      - name: nosqlbench-source
        depends: "configure-schema"
        templateRef:
          name: nosqlbench-job
          template: nosqlbench-source
      - name: nosqlbench-target
        depends: "configure-schema"
        templateRef:
          name: nosqlbench-job
          template: nosqlbench-target
      - name: run-diff
        depends: "nosqlbench-source && nosqlbench-target"
        arguments:
          parameters:
          - name: registry_ip
            value: "{{`{{tasks.start-registry.ip}}`}}"
        templateRef:
          name: spark-job
          template: spark-job-template
      - name: collect-diff-results
        depends: "run-diff"
        templateRef:
          name: cassandra-diff
          template: collect-results
      - name: gemini-oracle-sut
        depends: "collect-diff-results"
        templateRef:
          name: gemini-job
          template: gemini-oracle-sut
      - name: start-results-server
        depends: "gemini-oracle-sut"
        templateRef:
          name: results
          template: results-server