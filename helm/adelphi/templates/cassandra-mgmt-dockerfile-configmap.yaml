apiVersion: v1
kind: ConfigMap
metadata:
  name: cassandra-mgmt-dockerfile-configmap
  namespace: {{ .Values.namespace }}
data:
  settings.xml: |
    <settings>
      <mirrors>
        <mirror>
          <id>use-https-for-central</id>
          <name>Maven Central - HTTPS</name>
          <url>https://repo.maven.apache.org/maven2</url>
          <mirrorOf>central</mirrorOf>
        </mirror>
      </mirrors>
    </settings>
  Dockerfile: |
    FROM adoptopenjdk:11.0.4_11-jre-hotspot-bionic

    # explicitly set user/group IDs
    RUN set -eux; \
      groupadd -r cassandra --gid=999; \
      useradd -r -g cassandra --uid=999 cassandra

    RUN set -eux; \
      apt-get update; \
      apt-get install -y --no-install-recommends \
    # solves warning: "jemalloc shared library could not be preloaded to speed up memory allocations"
        libjemalloc1 \
    # "free" is used by cassandra-env.sh
        procps \
    # "cqlsh" needs a python interpreter
        python3 \
    # "ip" is not required by Cassandra itself, but is commonly used in scripting Cassandra's configuration (since it is so fixated on explicit IP addresses)
        iproute2 \
    # Cassandra will automatically use numactl if available
    #   https://github.com/apache/cassandra/blob/18bcda2d4c2eba7370a0b21f33eed37cb730bbb3/bin/cassandra#L90-L100
    #   https://github.com/apache/cassandra/commit/604c0e87dc67fa65f6904ef9a98a029c9f2f865a
        numactl \
      ; \
      rm -rf /var/lib/apt/lists/*

    # grab gosu for easy step-down from root
    # https://github.com/tianon/gosu/releases
    ENV GOSU_VERSION 1.12
    RUN set -eux; \
      savedAptMark="$(apt-mark showmanual)"; \
      apt-get update; \
      apt-get install -y --no-install-recommends ca-certificates dirmngr gnupg wget; \
      rm -rf /var/lib/apt/lists/*; \
      dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; \
      wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
      wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \
      export GNUPGHOME="$(mktemp -d)"; \
      gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \
      gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
      gpgconf --kill all; \
      rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; \
      apt-mark auto '.*' > /dev/null; \
      [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; \
      apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
      chmod +x /usr/local/bin/gosu; \
      gosu --version; \
      gosu nobody true

    ENV CASSANDRA_HOME /opt/cassandra
    ENV CASSANDRA_CONF /etc/cassandra
    ENV PATH $CASSANDRA_HOME/bin:$PATH

    COPY cassandra-build/ "$CASSANDRA_HOME"

    RUN set -eux; \
      savedAptMark="$(apt-mark showmanual)"; \
      apt-get update; \
      apt-get install -y --no-install-recommends ca-certificates dirmngr gnupg wget; \
      rm -rf /var/lib/apt/lists/*; \
      \
      apt-mark auto '.*' > /dev/null; \
      [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; \
      apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
      \
      mkdir -p "$CASSANDRA_HOME"; \
      \
      [ ! -e "$CASSANDRA_CONF" ]; \
      mv "$CASSANDRA_HOME/conf" "$CASSANDRA_CONF"; \
      ln -sT "$CASSANDRA_CONF" "$CASSANDRA_HOME/conf"; \
      \
      dpkgArch="$(dpkg --print-architecture)"; \
      case "$dpkgArch" in \
        ppc64el) \
    # https://issues.apache.org/jira/browse/CASSANDRA-13345
    # "The stack size specified is too small, Specify at least 328k"
          if grep -q -- '^-Xss' "$CASSANDRA_CONF/jvm.options"; then \
    # 3.11+ (jvm.options)
            grep -- '^-Xss256k$' "$CASSANDRA_CONF/jvm.options"; \
            sed -ri 's/^-Xss256k$/-Xss512k/' "$CASSANDRA_CONF/jvm.options"; \
            grep -- '^-Xss512k$' "$CASSANDRA_CONF/jvm.options"; \
          elif grep -q -- '-Xss256k' "$CASSANDRA_CONF/cassandra-env.sh"; then \
    # 3.0 (cassandra-env.sh)
            sed -ri 's/-Xss256k/-Xss512k/g' "$CASSANDRA_CONF/cassandra-env.sh"; \
            grep -- '-Xss512k' "$CASSANDRA_CONF/cassandra-env.sh"; \
          fi; \
          ;; \
      esac; \
      \
      mkdir -p "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; \
      chown -R cassandra:cassandra "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; \
      chmod 777 "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; \
      ln -sT /var/lib/cassandra "$CASSANDRA_HOME/data"; \
      ln -sT /var/log/cassandra "$CASSANDRA_HOME/logs"; \
      \
    # smoke test
      cassandra -v

    VOLUME /var/lib/cassandra

    # 7000: intra-node communication
    # 7001: TLS intra-node communication
    # 7199: JMX
    # 9042: CQL
    # 9160: thrift service
    EXPOSE 7000 7001 7199 9042 9160

    ######### MANAGEMENT API #########
    # https://github.com/datastax/management-api-for-apache-cassandra/blob/master/Dockerfile-4_0
    ##################################

    COPY api/management-api-common/target/datastax-mgmtapi-common-0.1.0-SNAPSHOT.jar /etc/cassandra/
    COPY api/management-api-agent/target/datastax-mgmtapi-agent-0.1.0-SNAPSHOT.jar /etc/cassandra/
    COPY api/management-api-server/target/datastax-mgmtapi-server-0.1.0-SNAPSHOT.jar /opt/mgmtapi/
    COPY api/management-api-shim-3.x/target/datastax-mgmtapi-shim-3.x-0.1.0-SNAPSHOT.jar /opt/mgmtapi/
    COPY api/management-api-shim-4.x/target/datastax-mgmtapi-shim-4.x-0.1.0-SNAPSHOT.jar /opt/mgmtapi/

    ENV TINI_VERSION v0.18.0
    ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
    RUN chmod +x /tini

    RUN set -eux; \
      apt-get update; \
      apt-get install -y --no-install-recommends wget iproute2; \
      rm -rf /var/lib/apt/lists/*

    ENV MCAC_VERSION 0.1.7
    ADD https://github.com/datastax/metric-collector-for-apache-cassandra/releases/download/v${MCAC_VERSION}/datastax-mcac-agent-${MCAC_VERSION}.tar.gz /opt/mcac-agent.tar.gz
    RUN mkdir /opt/mcac-agent && tar zxvf /opt/mcac-agent.tar.gz -C /opt/mcac-agent --strip-components 1 && rm /opt/mcac-agent.tar.gz

    # backwards compat with upstream ENTRYPOINT
    COPY docker-entrypoint.sh /usr/local/bin/
    RUN chmod +x /usr/local/bin/docker-entrypoint.sh && \
      ln -sf /usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh

    EXPOSE 9103
    EXPOSE 8080

    ENTRYPOINT ["/docker-entrypoint.sh"]
    CMD ["mgmtapi"]
  docker-entrypoint.sh: |
    #!/bin/bash
    set -e

    # first arg is `-f` or `--some-option`
    # or there are no args
    if [ "$#" -eq 0 ] || [ "${1#-}" != "$1" ]; then
      set -- cassandra -f "$@"
    fi

    if [ "$CASSANDRA_CONF" == "" ]; then
      export CASSANDRA_CONF=/etc/cassandra
    fi

    # allow the container to be started with `--user`
    if [ "$1" = 'mgmtapi' -a "$(id -u)" = '0' ]; then
      find "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra \
        \! -user cassandra -exec chown cassandra '{}' +
      # exec gosu cassandra "$BASH_SOURCE" "$@"
    fi

    _ip_address() {
      # scrape the first non-localhost IP address of the container
      # in Swarm Mode, we often get two IPs -- the container IP, and the (shared) VIP, and the container IP should always be first
      ip address | awk '
        $1 == "inet" && $NF != "lo" {
          gsub(/\/.+$/, "", $2)
          print $2
          exit
        }
      '
    }

    # "sed -i", but without "mv" (which doesn't work on a bind-mounted file, for example)
    _sed-in-place() {
      local filename="$1"; shift
      local tempFile
      tempFile="$(mktemp)"
      sed "$@" "$filename" > "$tempFile"
      cat "$tempFile" > "$filename"
      rm "$tempFile"
    }

    _metrics_collector_supported() {
      # currently, metrics collector does not work on arm64
      [ "$(uname -m)" != "aarch64" ]
    }

    if [ "$1" = 'mgmtapi' ]; then
      echo "Starting Management API"

      # Copy over any config files mounted at /config
      # cp /config/cassandra.yaml /etc/cassandra/cassandra.yaml
      if [ -d "/config" ] && ! [ "/config" -ef "$CASSANDRA_CONF" ]; then
        cp -R /config/* "${CASSANDRA_CONF:-/etc/cassandra}"
      fi

      # Make sure the management api agent jar is set
      # We do this here for the following reasons:
      # 1. configbuilder will overwrite the cassandra-env-sh, so we don't want to set this after
      # 2. We don't wan't operator or configbuilder to care so much about the version number or
      #    the fact this jar even exists.
      
      if _metrics_collector_supported && ! grep -qxF "JVM_OPTS=\"\$JVM_OPTS -javaagent:/opt/mcac-agent/lib/datastax-mcac-agent.jar\"" < /etc/cassandra/cassandra-env.sh ; then
        # ensure newline at end of file
        echo "" >> /etc/cassandra/cassandra-env.sh
        echo "JVM_OPTS=\"\$JVM_OPTS -javaagent:/opt/mcac-agent/lib/datastax-mcac-agent.jar\"" >> /etc/cassandra/cassandra-env.sh
      
        echo "" >> /opt/mcac-agent/config/metric-collector.yaml
        echo "data_dir_max_size_in_mb: 100" >> /opt/mcac-agent/config/metric-collector.yaml
      fi

      if ! grep -qxF "JVM_OPTS=\"\$JVM_OPTS -javaagent:/etc/cassandra/datastax-mgmtapi-agent-0.1.0-SNAPSHOT.jar\"" < /etc/cassandra/cassandra-env.sh ; then
        # ensure newline at end of file
        echo "" >> /etc/cassandra/cassandra-env.sh
        echo "JVM_OPTS=\"\$JVM_OPTS -javaagent:/etc/cassandra/datastax-mgmtapi-agent-0.1.0-SNAPSHOT.jar\"" >> /etc/cassandra/cassandra-env.sh
      fi

        # Set this if you want to ignore default env variables, i.e. when running inside an operator
        if [ $IGNORE_DEFAULTS ] || [ $USE_MGMT_API ]; then
            CASSANDRA_RPC_ADDRESS='0.0.0.0'
            CASSANDRA_BROADCAST_RPC_ADDRESS="$(_ip_address)"
        else
            : ${CASSANDRA_RPC_ADDRESS='0.0.0.0'}

            : ${CASSANDRA_LISTEN_ADDRESS='auto'}
            if [ "$CASSANDRA_LISTEN_ADDRESS" = 'auto' ]; then
                CASSANDRA_LISTEN_ADDRESS="$(_ip_address)"
            fi

            : ${CASSANDRA_BROADCAST_ADDRESS="$CASSANDRA_LISTEN_ADDRESS"}

            if [ "$CASSANDRA_BROADCAST_ADDRESS" = 'auto' ]; then
                CASSANDRA_BROADCAST_ADDRESS="$(_ip_address)"
            fi
            : ${CASSANDRA_BROADCAST_RPC_ADDRESS:=$CASSANDRA_BROADCAST_ADDRESS}

            if [ -n "${CASSANDRA_NAME:+1}" ]; then
                : ${CASSANDRA_SEEDS:="cassandra"}
            fi
            : ${CASSANDRA_SEEDS:="$CASSANDRA_BROADCAST_ADDRESS"}
            
            CASSANDRA_YAML="cassandra.yaml"
            if [ $CASSANDRA_DEPLOYMENT ]; then
                CASSANDRA_DEPLOYMENT=`echo "$CASSANDRA_DEPLOYMENT" | awk '{print tolower($0)}'`
                CASSANDRA_YAML="cassandra-$CASSANDRA_DEPLOYMENT.yaml"
            fi
            
            _sed-in-place "$CASSANDRA_CONF/$CASSANDRA_YAML" \
                -r 's/(- seeds:).*/\1 "'"$CASSANDRA_SEEDS"'"/'

            for yaml in \
                broadcast_address \
                broadcast_rpc_address \
                cluster_name \
                endpoint_snitch \
                listen_address \
                num_tokens \
                rpc_address \
                start_rpc \
            ; do
                var="CASSANDRA_${yaml^^}"
                val="${!var}"
                if [ "$val" ]; then
                    _sed-in-place "$CASSANDRA_CONF/$CASSANDRA_YAML" \
                        -r 's/^(# )?('"$yaml"':).*/\2 '"$val"'/'
                fi
            done

            for rackdc in dc rack; do
                var="CASSANDRA_${rackdc^^}"
                val="${!var}"
                if [ "$val" ]; then
                    _sed-in-place "$CASSANDRA_CONF/cassandra-rackdc.properties" \
                        -r 's/^('"$rackdc"'=).*/\1 '"$val"'/'
                fi
            done
      fi

      MGMT_API_ARGS=""

      # Hardcoding these for now
      MGMT_API_CASSANDRA_SOCKET="--cassandra-socket /tmp/cassandra.sock"
      MGMT_API_LISTEN_TCP="--host tcp://0.0.0.0:8080"
      MGMT_API_LISTEN_SOCKET="--host file:///tmp/oss-mgmt.sock"

      MGMT_API_ARGS="$MGMT_API_ARGS $MGMT_API_CASSANDRA_SOCKET $MGMT_API_LISTEN_TCP $MGMT_API_LISTEN_SOCKET"

      # These will generally come from the k8s operator
      if [ ! -z "$MGMT_API_EXPLICIT_START" ]; then
        MGMT_API_EXPLICIT_START="--explicit-start $MGMT_API_EXPLICIT_START"
        MGMT_API_ARGS="$MGMT_API_ARGS $MGMT_API_EXPLICIT_START"
      fi

      if [ ! -z "$MGMT_API_TLS_CA_CERT_FILE" ]; then
        MGMT_API_TLS_CA_CERT_FILE="--tlscacert $MGMT_API_TLS_CA_CERT_FILE"
        MGMT_API_ARGS="$MGMT_API_ARGS $MGMT_API_TLS_CA_CERT_FILE"
      fi
      if [ ! -z "$MGMT_API_TLS_CERT_FILE" ]; then
        MGMT_API_TLS_CERT_FILE="--tlscert $MGMT_API_TLS_CERT_FILE"
        MGMT_API_ARGS="$MGMT_API_ARGS $MGMT_API_TLS_CERT_FILE"
      fi
      if [ ! -z "$MGMT_API_TLS_KEY_FILE" ]; then
        MGMT_API_TLS_KEY_FILE="--tlskey $MGMT_API_TLS_KEY_FILE"
        MGMT_API_ARGS="$MGMT_API_ARGS $MGMT_API_TLS_KEY_FILE"
      fi

      if [ ! -z "$MGMT_API_PID_FILE" ]; then
        MGMT_API_PID_FILE="--pidfile $MGMT_API_PID_FILE"
        MGMT_API_ARGS="$MGMT_API_ARGS $MGMT_API_PID_FILE"
      fi

      MGMT_API_CASSANDRA_HOME="--cassandra-home /var/lib/cassandra/"
      MGMT_API_ARGS="$MGMT_API_ARGS $MGMT_API_CASSANDRA_HOME"

      if [ ! -z "$MGMT_API_NO_KEEP_ALIVE" ]; then
        MGMT_API_NO_KEEP_ALIVE="--no-keep-alive $MGMT_API_NO_KEEP_ALIVE"
        MGMT_API_ARGS="$MGMT_API_ARGS $MGMT_API_NO_KEEP_ALIVE"
      fi

      MGMT_API_JAR="$(find "/opt/mgmtapi" -name *server*.jar)"

      echo "Running" java ${MGMT_API_JAVA_OPTS} -Xms128m -Xmx128m -jar "$MGMT_API_JAR" $MGMT_API_ARGS
      exec /tini -g -- gosu cassandra java ${MGMT_API_JAVA_OPTS} -Xms128m -Xmx128m -jar "$MGMT_API_JAR" $MGMT_API_ARGS

    fi

    exec "$@"